@page "/"


@using UE4DataTableInterpreter.Enums
@using Enums; 

@inject KH3Randomizer.Data.RandomizerService RandomizerService

<div class="randomizer-content">
    <SectionBar CurrentSection="@this.currentSection" IsPlando="@this.IsPlando"></SectionBar>

    @if (this.currentSection == "Pools")
    {
        <Pools ContinueTo="@(() => ContinueTo(this.IsPlando ? "Options" : "QoL"))" AvailablePools="@this.availablePools" IsPlando="@this.IsPlando" CanBeNone="@this.CanBeNone" CurrentSeed="@this.CurrentSeed" Exceptions="@this.exceptions"
               UpdateAvailablePools="@(pools => UpdateAvailablePools(pools))" UpdatePlando="@(isPlando => UpdatePlandoOption(isPlando))" UpdateCanBeNone="@(canBeNone => UpdateCanBeNone(canBeNone))" 
               UpdateRandomizedOptions="@(randOptions => UpdateRandomizedOptions(randOptions))" UpdateCurrentSeed="@(currentSeed => UpdateCurrentSeed(currentSeed))" UpdateExceptions="@(exceptions => UpdateExceptions(exceptions))">
        </Pools>
    }
    else if (this.currentSection == "Options" && this.IsPlando)
    {
        <Options ContinueTo="@(() => ContinueTo("QoL"))" BackTo="@(() => BackTo("Pools"))"
                 UpdateAvailableOptions="@(options => UpdateAvailableOptions(options))" UpdateRandomizedOptions="@(randOptions => UpdateRandomizedOptions(randOptions))" UpdateCurrentSeed="@(currentSeed => UpdateCurrentSeed(currentSeed))" UpdateModifications="@((option1, option2) => UpdateModifications(option1, option2))"
                 CurrentSeed="@this.CurrentSeed" AvailablePools="@this.availablePools" AvailableOptions="@this.availableOptions" RandomizedOptions="@this.randomizedOptions" Modifications="@this.modifications" IsGoingBack="this.isGoingBack" IsDisabled="true">
        </Options>
    }
    else if (this.currentSection == "QoL")
    {
        <QualityOfLife ContinueTo="@(() => ContinueTo("Hints"))" BackTo="@(() => BackTo(this.IsPlando ? "Options" : "Pools"))"
                       UpdateAvailableQoLOptions="@(options => UpdateAvailableQualityOfLifeOptions(options))" AvailableQoLOptions="@this.availableQualityOfLifeOptions">
        </QualityOfLife>
    }
    else if (this.currentSection == "Hints")
    {
        <Hints ContinueTo="@(() => ContinueTo("Review"))" BackTo="@(() => BackTo("QoL"))" AvailableHints="@this.availableHints" UpdateAvailableHints="@(hints => UpdateAvailableHints(hints))" UpdateHintSelection="@(selection => UpdateHintSelection(selection))"></Hints>
    }
    else if (this.currentSection == "Review")
    {
        <Review BackTo="@(() => BackTo("Hints"))" CurrentSeed="@this.CurrentSeed" RandomizedOptions="@this.randomizedOptions"
                AvailablePools="@this.availablePools" Exceptions="this.exceptions" Modifications="@this.modifications"
                AvailableHints="@this.availableHints" HintSelectionType="@this.hintSelectionType" CanBeNone="@this.CanBeNone"
                AvailableQualityOfLifeSettings="@this.availableQualityOfLifeOptions"></Review>
    }
</div>


@code {
    public string CurrentSeed { get; set; }
    public bool IsPlando { get; set; } = false;
    public bool CanBeNone { get; set; } = false;

    //private Dictionary<string, bool> availablePlandoPools = new Dictionary<string, bool> {
    //    { "Treasures", true }, { "Events", true }, { "Starting Stats", true }, { "Lucky Emblems", false }, { "Bonuses", true },
    //    { "Fullcourse Abilities", true }, { "Level Ups", true }, { "Weapon Upgrades", true }, {"Equippables", true },
    //    { "Synthesis Items", true },

    //    { "Bosses", false }, { "Enemies", false }, { "General Stats", false }
    //};

    private Dictionary<string, RandomizeOptionEnum> availablePools = new Dictionary<string, RandomizeOptionEnum>
    {
        // World Categories - Custom Categories that contain Treasures, Events & Bonuses
        { "Olympus", RandomizeOptionEnum.Randomize }, { "Twilight Town", RandomizeOptionEnum.Randomize }, { "Toy Box", RandomizeOptionEnum.Randomize },
        { "Kingdom of Corona", RandomizeOptionEnum.Randomize }, { "Monstropolis", RandomizeOptionEnum.Randomize }, { "100 Acre Wood", RandomizeOptionEnum.Randomize },
        { "Arendelle", RandomizeOptionEnum.Randomize }, { "San Fransokyo", RandomizeOptionEnum.Randomize }, { "The Caribbean", RandomizeOptionEnum.Randomize },
        { "Keyblade Graveyard", RandomizeOptionEnum.Randomize }, { "Re:Mind", RandomizeOptionEnum.Randomize }, { "Dark World", RandomizeOptionEnum.Randomize },
        { "Unreality", RandomizeOptionEnum.Randomize },

        // Miscellaneous Categories
        { "Sora", RandomizeOptionEnum.Randomize }, { "Equipment Abilities", RandomizeOptionEnum.Replace }, { "Data Battle Rewards", RandomizeOptionEnum.Replace },
        { "Moogle Workshop", RandomizeOptionEnum.Randomize }, { "Fullcourse Abilities", RandomizeOptionEnum.Vanilla }, { "Lucky Emblems", RandomizeOptionEnum.Randomize },
        { "Flantastic Flans", RandomizeOptionEnum.Replace }, { "Minigames", RandomizeOptionEnum.Replace }, { "Battle Portals", RandomizeOptionEnum.Replace },

        // Always On - Proofs, Oathkeeper, Oblivion, Meow Wow, Gummiphone
        { "Always On", RandomizeOptionEnum.Replace }
    };

    private Dictionary<string, bool> exceptions = new Dictionary<string, bool>
    {
        { "Default Abilities", false },
        { "Default Critical Abilities", true },
        { "Early Critical Abilities", false }
    };

    private Dictionary<string, Dictionary<string, bool>> availableOptions = new();

    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();

    private List<Tuple<Option, Option>> modifications = new();

    private string hintSelectionType = "Verbose";
    private Dictionary<string, Dictionary<string, bool>> availableHints = new Dictionary<string, Dictionary<string, bool>> {
        { "Proofs", new Dictionary<string, bool>
        { { "Proof of Promises", true }, { "Proof of Times Past", true }, { "Proof of Fantasy", true } }
        },
        { "Abilities", new Dictionary<string, bool>
        { { "Pole Spin", true }, { "Block", true }, { "Dodge Roll", true }, { "Air-Slide", true },
              { "Double Flight", true }, { "Second Chance", true }, { "Withstand Combo", true }, }
        },
        { "Heartbinders", new Dictionary<string, bool>
        { { "Dream Heartbinder", true }, { "Pixel Heartbinder", true }, { "Pride Heartbinder", true },
              { "Ocean Heartbinder", true }, { "\'Ohana Heartbinder", true } }
        },
        { "Magic", new Dictionary<string, bool>
        { { "Fire", true }, { "Fira", true }, { "Firaga", true },
              { "Water", true }, { "Watera", true }, { "Waterga", true },
              { "Cure", true }, { "Cura", true }, { "Curaga", true },
              { "Blizzard", true }, { "Blizzara", true }, { "Blizzaga", true },
              { "Thunder", true }, { "Thundara", true }, { "Thundaga", true },
              { "Aero", true }, { "Aerora", true }, { "Aeroga", true } }
        },
        { "Formchanges", new Dictionary<string, bool>
        { { "Hero\'s Origin", true }, { "Grand Chef", true }, { "Ultima Weapon", true },
              { "Oblivion", true }, { "Oathkeeper", true } }
        },
        { "Secret Reports", new Dictionary<string, bool>
        { { "Secret Report 1", true }, { "Secret Report 2", true }, { "Secret Report 3", true }, { "Secret Report 4", true },
              { "Secret Report 5", true }, { "Secret Report 6", true }, { "Secret Report 7", true }, { "Secret Report 8", true },
              { "Secret Report 9", true }, { "Secret Report 10", true }, { "Secret Report 11", true }, { "Secret Report 12", true },
              { "Secret Report 13", true }
            }
        },
    };

    private Dictionary<string, Dictionary<string, bool>> availableQualityOfLifeOptions = new Dictionary<string, Dictionary<string, bool>> {
        { "Bosses", new Dictionary<string, bool>
        { { "Easier Mini-UFO", true }, { "Faster Raging Vulture", true }, { "Dark Baymax Phase 1 Skip", true }, { "Faster Lich Sequence", false } }
        },
        { "Events", new Dictionary<string, bool>
        { { "Frozen Chase Skip", true },  { "Faster Crab Collection", false }, { "Big Hero Rescue Skip", false },
            { "Faster Sora Collection", false }, { "Union χ Skip", false }, { "Guardians of Light Skip", false }, { "Slow Mickey Skip", true } }
        },
        { "Items", new Dictionary<string, bool>
        { { "All Maps Unlocked", false } }
        }
    };

    private string currentSection = "Pools";
    private bool isGoingBack = false;


    public void ContinueTo(string section)
    {
        this.currentSection = section;
        this.isGoingBack = false;
    }

    public void BackTo(string section)
    {
        this.currentSection = section;
        this.isGoingBack = true;

        if (this.currentSection == "Pools")
        {
            this.modifications.Reverse();

            foreach (var (initialOption, swapOption) in this.modifications)
            {
                this.RandomizerService.UpdateRandomizedItem(ref this.randomizedOptions, initialOption.Category, initialOption.SubCategory, initialOption.Name, swapOption.Value,
                                                            swapOption.Category, swapOption.SubCategory, swapOption.Name, initialOption.Value);

            }

            this.UpdateRandomizedOptions(this.randomizedOptions);
            this.UpdateModifications(null, null);

            this.modifications = new();
        }
    }

    public void UpdateCurrentSeed(string currentSeed)
    {
        this.CurrentSeed = currentSeed;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateAvailablePools(Dictionary<string, RandomizeOptionEnum> availablePools)
    {
        this.availablePools = availablePools;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateExceptions(Dictionary<string, bool> exceptions)
    {
        this.exceptions = exceptions;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateAvailableOptions(Dictionary<string, Dictionary<string, bool>> availableOptions)
    {
        this.availableOptions = availableOptions;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateRandomizedOptions(Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions)
    {
        this.randomizedOptions = randomizedOptions;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateModifications(Option initalOption, Option swapOption)
    {
        if (initalOption == null && swapOption == null)
            this.modifications = new();
        else
            this.modifications.Add(new Tuple<Option, Option>(initalOption, swapOption));
    }

    public void UpdateHintSelection(string selection)
    {
        this.hintSelectionType = selection;
    }

    public void UpdateAvailableHints(Dictionary<string, Dictionary<string, bool>> availableHints)
    {
        this.availableHints = availableHints;
    }

    public void UpdateAvailableQualityOfLifeOptions(Dictionary<string, Dictionary<string, bool>> availableQualityOfLifeOptions)
    {
        this.availableQualityOfLifeOptions = availableQualityOfLifeOptions;
    }

    public void UpdatePlandoOption(bool isPlando)
    {
        this.IsPlando = isPlando;
    }

    public void UpdateCanBeNone(bool canBeNone)
    {
        this.CanBeNone = canBeNone;
    }
}