@page "/"


@using UE4DataTableInterpreter.Enums

<div class="randomizer-content">
    <SectionBar CurrentSection="@this.currentSection"></SectionBar>

    @if (this.currentSection == "Pools")
    {
        <Pools ContinueTo="@(ContinueTo)" AvailablePools="@this.availablePools"
               AvailableExtras="@this.availableExtras"
               Replacements="@this.replacements"
               UpdateAvailablePools="@(pools => UpdateAvailablePools(pools))"
               UpdateAvailableExtras="@(extras => UpdateAvailableExtras(extras))"
               UpdateReplacements="@(replacements => UpdateReplacements(replacements))">
        </Pools>
    }
    else if (this.currentSection == "Options")
    {
        <Options ContinueTo="@(() => ContinueTo("Hints"))" BackTo="@(() => BackTo("Pools"))"
                 UpdateAvailableOptions="@(options => UpdateAvailableOptions(options))" UpdateRandomizedOptions="@(randOptions => UpdateRandomizedOptions(randOptions))" UpdateCurrentSeed="@(currentSeed => UpdateCurrentSeed(currentSeed))" UpdateModifications="@((option1, option2) => UpdateModifications(option1, option2))"
                 CurrentSeed="@this.CurrentSeed" AvailablePools="@this.availablePools" AvailableExtras="@this.availableExtras" AvailableOptions="@this.availableOptions" RandomizedOptions="@this.randomizedOptions" Replacements="@this.replacements" Modifications="@this.modifications" IsGoingBack="this.isGoingBack">
        </Options>
    }
    else if (this.currentSection == "Hints")
    {
        <Hints ContinueTo="@(() => ContinueTo("Review"))" BackTo="@(() => BackTo("Options"))"
               RandomizedOptions="@this.randomizedOptions" UpdateHintSelection="@this.UpdateHintSelection" HintSelectionType="@this.hintSelectionType" ImportantChecks="@this.importantChecks"></Hints>
    }
    else if (this.currentSection == "Review")
    {
        <Review BackTo="@(() => BackTo("Hints"))" CurrentSeed="@this.CurrentSeed" RandomizedOptions="@this.randomizedOptions"
                AvailablePools="@this.availablePools" AvailableExtras="@this.availableExtras" AvailableOptions="@this.availableOptions" Replacements="@this.replacements" Modifications="@this.modifications"
                AvailableHints="@this.availableHints" HintSelectionType="@this.hintSelectionType" ImportantChecks="@this.importantChecks"></Review>
    }
</div>


@code {
    public string CurrentSeed { get; set; }

    private Dictionary<string, bool> availablePools = new Dictionary<string, bool>
    {
        { "Treasures", true }, { "Events", true }, { "Starting Stats", true }, { "Lucky Emblems", true }, { "Bonuses", true },
        { "Fullcourse Abilities", true }, { "Level Ups", true }, { "Weapon Upgrades", true }, {"Equippables", true },
        { "Synthesis Items", true },

        { "General Stats", false }
    };

    private Dictionary<string, Extra> availableExtras = new Dictionary<string, Extra>
    {
        { "Balanced Bonuses", new Extra("Balanced Bonuses", true, "Bonuses", "Evenly distribute checks that appear on Bonuses.") },
        { "Pole Spin Start", new Extra("Pole Spin Start", false, "Starting Stats", "Ensures Pole Spin is a starting ability.") },
        { "Synthesizable Proofs", new Extra("Allow Synthesizable Proofs", true, "Synthesis Items", "Allows Proofs to be placed in Moogle Synthesis.") },
        { "Key Abilities Fullcourse", new Extra("Allow Key Abilities on Fullcourse", true, "Fullcourse Abilities", "Allows Key Abilities to be randomzied onto Fullcourse Abilities.") },
        { "Key Abilities Upgrades", new Extra("Allow Key Abilities on Weapon Upgrades", true, "Weapon Upgrades", "Allows Key Abilities to be randomized onto Weapon Upgrades.") },
        { "Key Abilities Equippables", new Extra("Allow Key Abilities on Equippables", true, "Equippables", "Allows Key Abilities to be randomized onto Equippables.") },
        { "Allow Ultima", new Extra("Allow Ultima", true, "", "Allows Ultima to be randomized into the pool.") }
    };

    private Dictionary<DataTableEnum, Dictionary<string, bool>> replacements = new Dictionary<DataTableEnum, Dictionary<string, bool>>()
    {
        { DataTableEnum.TreasureKG, new Dictionary<string, bool>
            { { "Keyblade Graveyard", false } }
        },
        { DataTableEnum.TreasureEW, new Dictionary<string, bool>
            { { "The Final World", false } }
        },
        { DataTableEnum.TreasureBT, new Dictionary<string, bool>
            { { "Scala Ad Caelum", false } }
        },
        { DataTableEnum.Event, new Dictionary<string, bool>
            { { "Keyblades", false }, { "Heartbinders", false }, { "Reports", true }, { "Data Battles", false }, { "Yozora", true }, { "Complete 100 Acre Wood", true }, { "Complete All Classic Kingdom Minigames", true }, { "Complete All Bistro Recipes", true } }
        },
        { DataTableEnum.LuckyMark, new Dictionary<string, bool>
            { { "Lucky Emblems", false } }
        },
        { DataTableEnum.VBonus, new Dictionary<string, bool>
            { { "Keyblade Graveyard VBonus", false }, { "The Final World VBonus", false }, { "Re:Mind Keyblade Graveyard VBonus", false },
                { "Scala Ad Caelum VBonus", false }, { "Flantastic Seven", false }, { "Minigames", false } }
        },
        { DataTableEnum.FullcourseAbility, new Dictionary<string, bool>
            { { "Abilities", false } }
        },
        { DataTableEnum.LevelUp, new Dictionary<string, bool>
            { { "Levels", true } }
        },
        { DataTableEnum.WeaponEnhance, new Dictionary<string, bool>
            { { "Weapon Upgrades", false } }
        }
    };

    private List<string> importantChecks = new List<string>()
    {
        "Proof of Promises", "Proof of Times Past", "Proof of Fantasy",
        "Secret Report 1", "Secret Report 2", "Secret Report 3", "Secret Report 4",
        "Secret Report 5", "Secret Report 6", "Secret Report 7", "Secret Report 8",
        "Secret Report 9", "Secret Report 10", "Secret Report 11", "Secret Report 12", "Secret Report 13",
        "Magic: Aero", "Magic: Blizzard", "Magic: Cure",
        "Magic: Fire", "Magic: Thunder", "Magic: Water",
        "\'Ohana Heartbinder", "Dream Heartbinder", "Ocean Heartbinder",
        "Pixel Heartbinder", "Pride Heartbinder",
        "Ability: Dodge Roll", "Ability: Air Slide", "Ability: Block", "Ability: Pole Spin",
        "Ability: Glide", "Ability: Doubleflight", "Ability: Aerial Recovery",
        "Ability: Second Chance", "Ability: Withstand Combo"
    };

    private Dictionary<string, Dictionary<string, bool>> availableOptions = new();

    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();

    private List<Tuple<Option, Option>> modifications = new();

    private string hintSelectionType = "Verbose";
    private Dictionary<string, Dictionary<string, bool>> availableHints = new Dictionary<string, Dictionary<string, bool>>
    {
        { "Proofs", new Dictionary<string, bool>
            { { "Proof of Promises", true }, { "Proof of Times Past", true }, { "Proof of Fantasy", true } }
        },
        { "Abilities", new Dictionary<string, bool>
            { { "Pole Spin", true }, { "Block", true }, { "Dodge Roll", true }, { "Air Slide", true },
              { "Doubleflight", true }, { "Second Chance", true }, { "Withstand Combo", true }, }
        },
        { "Heartbinders", new Dictionary<string, bool>
            { { "Dream Heartbinder", true }, { "Pixel Heartbinder", true }, { "Pride Heartbinder", true },
              { "Ocean Heartbinder", true }, { "\'Ohana Heartbinder", true } }
        },
        { "Magic", new Dictionary<string, bool>
            { { "Fire", true }, { "Fira", true }, { "Firaga", true },
              { "Water", true }, { "Watera", true }, { "Waterga", true },
              { "Cure", true }, { "Cura", true }, { "Curaga", true },
              { "Blizzard", true }, { "Blizzara", true }, { "Blizzaga", true },
              { "Thunder", true }, { "Thundara", true }, { "Thundaga", true },
              { "Aero", true }, { "Aerora", true }, { "Aeroga", true } }
        },
        { "Formchanges", new Dictionary<string, bool>
            { { "Hero\'s Origin", true }, { "Grand Chef", true }, { "Ultima Weapon", true },
              { "Oblivion", true }, { "Oathkeeper", true } }
        },
        { "Secret Reports", new Dictionary<string, bool>
            { { "Secret Report 1", true }, { "Secret Report 2", true }, { "Secret Report 3", true }, { "Secret Report 4", true },
              { "Secret Report 5", true }, { "Secret Report 6", true }, { "Secret Report 7", true }, { "Secret Report 8", true },
              { "Secret Report 9", true }, { "Secret Report 10", true }, { "Secret Report 11", true }, { "Secret Report 12", true },
              { "Secret Report 13", true }
            }
        },
    };

    private string currentSection = "Pools";
    private bool isGoingBack = false;


    public void ContinueTo(string section)
    {
        this.currentSection = section;
        this.isGoingBack = false;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void BackTo(string section)
    {
        this.currentSection = section;
        this.isGoingBack = true;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateCurrentSeed(string currentSeed)
    {
        this.CurrentSeed = currentSeed;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateAvailablePools(Dictionary<string, bool> availablePools)
    {
        this.availablePools = availablePools;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public void UpdateAvailableExtras(Dictionary<string, Extra> availableExtras)
    {
        this.availableExtras = availableExtras;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateAvailableOptions(Dictionary<string, Dictionary<string, bool>> availableOptions)
    {
        this.availableOptions = availableOptions;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateRandomizedOptions(Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions)
    {
        this.randomizedOptions = randomizedOptions;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateReplacements(Dictionary<DataTableEnum, Dictionary<string, bool>> replacements)
    {
        this.replacements = replacements;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateModifications(Option initalOption, Option swapOption)
    {
        if (initalOption == null && swapOption == null)
            this.modifications = new();
        else
            this.modifications.Add(new Tuple<Option, Option>(initalOption, swapOption));


        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateHintSelection(string selection)
    {
        this.hintSelectionType = selection;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void UpdateAvailableHints(Dictionary<string, Dictionary<string, bool>> availableHints)
    {
        this.availableHints = availableHints;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}