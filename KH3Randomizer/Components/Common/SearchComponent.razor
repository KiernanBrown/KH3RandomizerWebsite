<div class="search-section">
    <div class="selected-checks">
        <h4 class="search-title"><b>@this.SelectedTitle</b></h4>
        <div class=@(ActionType.Equals("Options") ? "kh-input options-input" : ActionType.Equals("Modal") ? "kh-input modal-input" : "kh-input")>
            <input value="@searchValue" id="randomizer_search" name="randomizer_search" class="kh-inputfield" @oninput="@((e) => this.SearchChecks(e.Value.ToString()))" placeholder="Search for a check to add to your @this.SelectedTitle..." />
        </div>

        <div class="selected-check-list">
            @foreach (var check in this.SelectedChecks)
            {
                <span class=@(ActionType.Equals("Options") ? "check options-check" : ActionType.Equals("Modal") ? "check modal-check" : "check") @onclick="() => this.ToggleCheck(check)">@this.GetFilteredCheck(check) <i class="bi bi-dash-lg check-icon"></i></span>
            }
        </div>

    </div>

    <br />

    <div class="found-checks">
        <h5><b>@this.SearchTitle</b></h5>
        @if (this.foundChecks.Count > 0)
        {
            @foreach (var check in this.foundChecks)
            {
                <span class=@(ActionType.Equals("Options") ? "check options-check" : ActionType.Equals("Modal") ? "check modal-check" : "check") @onclick="() => this.ToggleCheck(check)">@this.GetFilteredCheck(check) <i class="bi bi-plus-lg check-icon"></i></span>
            }
        }
        else if (string.IsNullOrEmpty(this.searchValue))
        {
            <em>Use the search bar above to add to your @this.SelectedTitle...</em>
        }
        else
        {
            <em>No checks found for @this.searchValue</em>
        }
    </div>
</div>

@code {

    [Parameter] public List<string> SelectedChecks { get; set; }
    [Parameter] public int SearchLimit { get; set; }
    [Parameter] public string SelectedTitle { get; set; }
    [Parameter] public string SearchTitle { get; set; }
    [Parameter] public string Filter { get; set; }
    [Parameter] public string ActionType { get; set; }
    [Parameter] public EventCallback<string> StateUpdate { get; set; }

    private string searchValue = "";
    private List<string> foundChecks = new List<string>();

    private void SearchChecks(string search)
    {
        this.searchValue = search;

        this.foundChecks = new List<string>();

        if (!string.IsNullOrEmpty(this.searchValue))
        {
            foreach (var category in RandomizerService.GetDefaultOptions())
            {
                var categoryConverted = category.Key.DataTableEnumToKey();
                foreach (var subCategory in category.Value)
                {
                    var subCategoryConverted = subCategory.Key.CategoryToKey(category.Key);

                    foreach (var option in subCategory.Value)
                    {
                        if (this.foundChecks.Count < this.SearchLimit && option.Value.ValueIdToDisplay().ToLower().Contains(this.searchValue.ToLower()) && !option.Value.ValueIdToDisplay().Contains("ETres"))
                        {
                            string checkToAdd = option.Value.ValueIdToDisplay();
                            if (!string.IsNullOrEmpty(this.Filter))
                            {
                                var filteredOption = checkToAdd.Split(this.Filter);
                                if (filteredOption.Count() <= 1)
                                    continue;
                            }

                            if (!this.foundChecks.Contains(checkToAdd) && !this.SelectedChecks.Contains(checkToAdd))
                                this.foundChecks.Add(checkToAdd);

                            if (this.foundChecks.Count == this.SearchLimit)
                                break;
                        }
                    }
                }
            }
        }

        this.foundChecks.Sort();

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ToggleCheck(string check)
    {
        if (this.SelectedChecks.Contains(check))
        {
            this.SelectedChecks.Remove(check);
            SearchChecks(this.searchValue);
        }
        else if (this.foundChecks.Contains(check))
        {
            this.SelectedChecks.Add(check);
            SearchChecks(this.searchValue);
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });

        StateUpdate.InvokeAsync(null);
    }

    private string GetFilteredCheck(string check)
    {
        if (string.IsNullOrEmpty(this.Filter))
            return check;
        var filteredOption = check.Split(this.Filter);
        if (filteredOption.Count() <= 1)
            return check;
        return filteredOption[1];
    }
}
