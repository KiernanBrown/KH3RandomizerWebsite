@using UE4DataTableInterpreter.Enums

@inject KH3Randomizer.Data.RandomizerService RandomizerService

<div class="subpools-section">
    <div class="subpools-subsection">
        @foreach (var pool in this.availablePools)
        {
            @if (pool.Value)
            {
                var replaceOptions = this.GetReplaceOptionsFromPool(pool.Key);
                if (replaceOptions.Count > 0)
                {
                    <div style="margin: auto; text-align: center; border: 2px solid #2196F3; border-radius: 20px; margin: 2vh 0; padding: 6px;">
                        <h4><b>@pool.Key</b></h4>
                        @foreach (var option in replaceOptions)
                        {
                            <div class="col-md-4" style="display:inline-block; padding: 0 1.2vw;">
                                @if (replaceOptions.Count > 1)
                                {
                                    <div style="margin:auto; text-align: center;">
                                        <label for="@option.Key-range"><b>@option.Key</b></label>
                                    </div>
                                }
                                <div class="form-control-range" style="padding: 0 1.8vw;">
                                    <input type="range" class="custom-range" id="@option.Key-range" max="2" min="1" value="@GetReplaceOptionValue(pool.Key, option.Key)" step="1" @onchange="@((e) => { UpdateReplaceOption(pool.Key, option.Key, e); })">
                                </div>
                                <div class="range-label-container">
                                    <label class="range-label">Replace</label>
                                    <label class="range-label" style="text-align:right;">Randomize</label>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        }
    </div>
    <br />

    <button class="btn kh-button" onclick="@BackTo" style="float: left;">Back to Pools...</button>
    <button class="btn kh-button" onclick="@ContinueTo" style="float: right;">Continue to Options...</button>
</div>



@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public EventCallback<string> BackTo { get; set; }
    [Parameter] public EventCallback<string> ContinueTo { get; set; }

    [Parameter] public EventCallback<Dictionary<string, Dictionary<string, bool>>> UpdateAvailableOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>> UpdateRandomizedOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, bool>>> UpdateReplacements { get; set; }

    [Parameter] public Dictionary<string, bool> AvailablePools { get; set; }
    [Parameter] public Dictionary<string, Extra> AvailableExtras { get; set; }
    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableOptions { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, bool>> Replacements { get; set; }
    [Parameter] public bool IsGoingBack { get; set; }

    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> tempRandomizedItems = new();
    private Dictionary<string, Dictionary<string, bool>> tempOptions = new();

    private Dictionary<string, bool> availablePools = new();
    private Dictionary<string, Extra> availableExtras = new();
    private Dictionary<string, Dictionary<string, bool>> availableOptions = new();
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();
    private Dictionary<DataTableEnum, Dictionary<string, bool>> replacements { get; set; }

    private string currentSelection = "";
    private string currentOption = "";
    private bool isSpoilerChecked = true;

    protected override void OnInitialized()
    {
        this.availablePools = this.AvailablePools;
        this.availableExtras = this.AvailableExtras;
        this.availableOptions = this.AvailableOptions;
        this.randomizedOptions = this.RandomizedOptions;
        this.replacements = this.Replacements;

        this.UpdateAvailableOptions.InvokeAsync(this.availableOptions);
        this.UpdateRandomizedOptions.InvokeAsync(this.randomizedOptions);
        this.UpdateReplacements.InvokeAsync(this.replacements);

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override void OnParametersSet()
    {
        this.availablePools = this.AvailablePools;
        this.availableExtras = this.AvailableExtras;
        this.availableOptions = this.AvailableOptions;
        this.randomizedOptions = this.RandomizedOptions;
        this.replacements = this.Replacements;

        base.OnParametersSet();
    }

    private void UpdateCurrentSelection(string selection)
    {
        this.currentSelection = selection;
    }

    private Dictionary<string, bool> GetReplaceOptionsFromPool(string pool)
    {
        if (Replacements.ContainsKey(pool.KeyToDataTableEnum()))
        {
            var replaceOptions = Replacements[pool.KeyToDataTableEnum()];
            return replaceOptions.Count > 0 ? Replacements[pool.KeyToDataTableEnum()] : new Dictionary<string, bool>();
        }
        return new Dictionary<string, bool>();
    }

    private int GetReplaceOptionValue(string pool, string option)
    {
        // If the option in true in replacements, return 1
        // If the option is true in AvailableOptions (?), return 2
        // If the option is false in AvailableOptions (?), return 0
        if (Replacements[pool.KeyToDataTableEnum()][option])
        {
            return 1;
        }
        return 2;
    }

    private void UpdateReplaceOption(string pool, string option, ChangeEventArgs e)
    {
        // 0 is Vanilla, 1 is Replace, 2 is Randomize
        switch (e.Value)
        {
            case "1": this.replacements[pool.KeyToDataTableEnum()][option] = true;
                break;
            case "2":
                // This option should be randomized
                this.replacements[pool.KeyToDataTableEnum()][option] = false;
                break;
            default:
                // This option should not be randomized
                this.replacements[pool.KeyToDataTableEnum()][option] = false;
                break;
        }
        this.UpdateReplacements.InvokeAsync(this.replacements);
    }
}