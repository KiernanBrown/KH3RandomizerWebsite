@using UE4DataTableInterpreter.Enums 

@inject RandomizerService RandomizerService

<Table Items="this.SynthesisItems" Context="SynthesisItemContext" CurrentPage="1">
    <TableHeader>
        <th>Synthesis Item</th>
        <th>Reward</th>
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>
            @SynthesisItemContext.Id.KeyIdToDisplay()
            <Tooltip Text="@SynthesisItemContext.Id.KeyIdToDescription()">
                <i class="bi bi-question-circle" style="font-size: 1rem; color: #0366de;"></i>
            </Tooltip>
        </td>
        <td>@SynthesisItemContext.Reward.ValueIdToDisplay()</td>
        @if (this.actionType == "Options")
        {
            <td><a href="#" @onclick="() => OpenModal(SynthesisItemContext)" @onclick:preventDefault>Change</a></td>
        }
        else if (this.actionType == "Modal")
        {
            <td><a href="#" @onclick="@(() => SwapOptions.Invoke(DataTableEnum.SynthesisItem, SynthesisItemContext.Id, "Reward", SynthesisItemContext.Reward))" @onclick:preventDefault>Swap</a></td>
        }
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string SynthesisItemName { get; set; }

    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>> UpdateRandomizedOptions { get; set; }
    [Parameter] public Action<Option, Option> UpdateModifications { get; set; }

    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableOptions { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }

    [Parameter] public string ActionType { get; set; } = "Options"; // Options, Modal, Spoiler
    [Parameter] public string CurrentSeed { get; set; }


    [Parameter] public Action<DataTableEnum, string, string, string> SwapOptions { get; set; }

    private List<SynthesisItem> SynthesisItems { get; set; }
    private Dictionary<string, Dictionary<string, bool>> availableOptions = new();
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();
    private string actionType;
    private string currentSeed;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(this.SynthesisItemName), out var value) && parameters.TryGetValue<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>>(nameof(RandomizedOptions), out var options))
        {
            this.randomizedOptions = options;
            this.SynthesisItems = this.RandomizerService.GetAvailableSynthesisItems(value, ref this.randomizedOptions);
        }

        if (parameters.TryGetValue<Dictionary<string, Dictionary<string, bool>>>(nameof(AvailableOptions), out var availableOptions))
        {
            this.availableOptions = availableOptions;
        }

        if (parameters.TryGetValue<string>(nameof(ActionType), out var actionType))
        {
            this.actionType = actionType;
        }

        if (parameters.TryGetValue<string>(nameof(CurrentSeed), out var currentSeed))
        {
            this.currentSeed = currentSeed;
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(SynthesisItem synthesisItem)
    {
        var parameters = new ModalParameters();

        parameters.Add("Category", DataTableEnum.SynthesisItem);
        parameters.Add("SubCategory", synthesisItem.Id);
        parameters.Add("Name", "Reward");
        parameters.Add("Value", synthesisItem.Reward);
        parameters.Add("CurrentSeed", this.currentSeed);
        parameters.Add("ActionType", "Modal");

        parameters.Add("UpdateRandomizedOptions", this.UpdateRandomizedOptions);
        parameters.Add("UpdateModifications", this.UpdateModifications);

        parameters.Add("AvailableOptions", this.availableOptions);
        parameters.Add("RandomizedOptions", this.randomizedOptions);

        var options = new ModalOptions { Class = "modal-custom" };
        var displayValue = string.IsNullOrEmpty(synthesisItem.Reward.ValueIdToDisplay()) ? "" : synthesisItem.Reward.ValueIdToDisplay();

        Modal.Show<ChangeOption>($"Change {this.SynthesisItemName} {synthesisItem.Id.KeyIdToDisplay()} - {displayValue}", parameters, options);
    }
}