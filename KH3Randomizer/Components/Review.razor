@using UE4DataTableInterpreter.Enums
@using Enums;

@inject RandomizerService RandomizerService
@inject HintService HintService
@inject IJSRuntime js

<div class="review-section">
    <div class="review-subsection">
        <div class="review-sub-subsection">
            <div class="review-header">
                <h3 for="seed" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #aeecff;"></span><b>Seed Name: </b></h3>
                <label id="seed" name="seed" style="margin-left: 50px; margin-top: 2px; font-weight: 600;">@(string.IsNullOrEmpty(this.CurrentSeed) ? "The Seed Name is blank." : this.CurrentSeed)</label>
            </div>

            <div class="review-content">
            </div>
        </div>

        <div class="review-sub-subsection">
            <div class="review-header">
                <h3 for="pools" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #c9aeff;"></span><b>Pools: </b></h3>
            </div>
            <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                @if (this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Randomize).Count() > 0)
                {
                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Randomized: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Randomize))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Randomize"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                <br />
                <br />

                @if (this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Replace).Count() > 0)
                {
                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Replace: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Replace))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Replace"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                <br />
                <br />

                @if (this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Vanilla).Count() > 0)
                {
                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Vanilla: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Vanilla))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Vanilla"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        @if (this.Exceptions.Where(x => x.Value).Count() > 0 || this.CanBeNone)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="exceptions" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #f37d9d;"></span><b>Exceptions: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    @if (this.CanBeNone)
                    {
                        <div style="display: inline-flex; width: 100%">
                            <div style="display: inline-flex;">
                                <div id="canBeNone_value" style="display: inline;">
                                    <span class="sub-option-bubble" style="background: #f95968;">Can Be None</span>
                                </div>
                            </div>
                        </div>
                    }

                    @foreach (var exception in this.Exceptions.Where(x => x.Value))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(exception.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="background: #f95968;">@exception.Key</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (this.Modifications.Count > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="modifications" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #76d3ff;"></span><b>Modifications: </b></h3>
                </div>
                <div class="review-content" style="max-height: 500px; overflow-y: auto;">
                    @foreach (var modification in this.Modifications)
                    {
                        <div style="display: inline-flex; width: 100%">
                            <label id="@modification.Item1.Category" name="@modification.Item1.Category" style="min-width: fit-content; max-width: fit-content; margin-top: 10px;">
                                <span class="pools-options-color" style="background: #76d3ff;"></span><b>@(@modification.Item1.Category.DataTableEnumToKey()):</b>
                            </label>

                            <div id="@(modification.Item1.Category)_subOptions" style="display: inline;">
                                <span style="margin-left: 25px;"><b>@modification.Item1.SubCategory.KeyIdToDisplay() - </b></span>

                                <span class="sub-option-bubble" style="background: #56adff;">@modification.Item1.Value.ValueIdToDisplay()</span>
                                <span style="margin-left: 5px;"><b> Swapped with:</b></span>
                            </div>
                        </div>

                        <div style="display: inline-flex; width: 90%; margin-left: 50px;">
                            <label id="@modification.Item2.Category" name="@modification.Item2.Category" style="min-width: fit-content; max-width: fit-content; margin-top: 10px;">
                                <span class="pools-options-color" style="background: #76d3ff;"></span><b>@(@modification.Item2.Category.DataTableEnumToKey()):</b>
                            </label>

                            <div id="@(modification.Item2.Category)_subOptions" style="display: inline;">
                                <span style="margin-left: 25px;"><b>@modification.Item2.SubCategory.KeyIdToDisplay() - </b></span>

                                <span class="sub-option-bubble" style="background: #2f9aff;">@modification.Item2.Value.ValueIdToDisplay()</span>
                            </div>
                        </div>

                        <br />
                    }
                </div>
            </div>
        }

        @if (this.AvailableQualityOfLifeSettings.Count > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="hints" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #92ff9b;"></span><b>Quality of Life: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var qol in this.AvailableQualityOfLifeSettings)
                    {
                        @if (qol.Value.Where(x => x.Value).Count() > 0)
                        {
                            <h4 style="font-size: 1.0rem; margin-left: 10px;"><u><b>@qol.Key: </b></u></h4>

                            @foreach (var qolValue in qol.Value.Where(x => x.Value))
                            {
                                <div style="display: inline-flex;">
                                    <div id="@(qolValue.Key)_value" style="display: inline;">
                                        <span class="sub-option-bubble" style="@qolColors[qol.Key]">@qolValue.Key</span>
                                    </div>
                                </div>
                            }

                            <br />
                            <br />
                        }
                    }
                </div>
            </div>
        }

        @if (this.AvailableHints.Count > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="hints" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #ffac2f;"></span><b>Hints: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    <h4 style="font-size: 1.0rem; margin-left: 10px;"><u><b>Hint Selection Type: @this.HintSelectionType</b></u></h4>

                    @foreach (var hint in this.AvailableHints)
                    {
                        @if (hint.Value.Where(x => x.Value).Count() > 0)
                        {
                            <div style="display: inline-flex;">
                                <div id="@(hint.Key)_value" style="display: inline;">
                                    <span class="sub-option-bubble" style="background: #ffac2f;">@hint.Key</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <button class="btn kh-button" onclick="@BackTo" style="float: left;">Back to Hints...</button>
    <button class="btn kh-button" @onclick="() => this.GenerateSeed()" style="float: right;" disabled="@this.isGeneratingSeed">@(!this.isGeneratingSeed ? "Generate Seed" : "Generating Seed...")</button>
</div>
@code {
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public Action BackTo { get; set; }
    [Parameter] public string CurrentSeed { get; set; }

    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }

    [Parameter] public Dictionary<string, RandomizeOptionEnum> AvailablePools { get; set; }
    [Parameter] public Dictionary<string, bool> Exceptions { get; set; }
    // [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableOptions { get; set; }
    [Parameter] public List<Tuple<Option, Option>> Modifications { get; set; }
    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableHints { get; set; }
    [Parameter] public string HintSelectionType { get; set; }
    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableQualityOfLifeSettings { get; set; }
    [Parameter] public bool CanBeNone { get; set; }

    private List<string> pools { get; set; } = new();
    private Dictionary<string, List<string>> hintValues = new();
    private Dictionary<string, bool> qolValues = new();
    // private Dictionary<string, string> options { get; set; } = new();
    private List<string> modifications { get; set; } = new();

    private Dictionary<string, string> poolColors = new Dictionary<string, string>
    {
        { "Randomize", "background: #a076f5;" },
        { "Replace", "background: #b189ff;" },
        { "Vanilla", "background: #c9aeff;" },


        //{ "Olympus", "background: #56adff;" },
        //{ "Twilight Town", "background: #56adff;" },
        //{ "Kingdom of Corona", "background: #56adff;" },
        //{ "Toy Box", "background: #56adff;" },
        //{ "Monstropolis", "background: #56adff;" },
        //{ "100 Acre Wood", "background: #56adff;" },
        //{ "Arendelle", "background: #56adff;" },
        //{ "San Fransokyo", "background: #56adff;" },
        //{ "The Caribbean", "background: #56adff;" },
        //{ "Keyblade Graveyard", "background: #56adff;" },
        //{ "Re:Mind", "background: #56adff;" },
        //{ "Dark World", "background: #56adff;" },
        //{ "Unreality", "background: #56adff;" },

        //{ "Sora", "background: #56adff;" },
        //{ "Equipment Abilities", "background: #56adff;" },
        //{ "Data Battle Rewards", "background: #56adff;" },
        //{ "Moogle Workshop", "background: #56adff;" },
        //{ "Fullcourse Abilities", "background: #56adff;" },
        //{ "Lucky Emblems", "background: #56adff;" },
        //{ "Flantastic Flans", "background: #56adff;" },
        //{ "Minigames", "background: #56adff;" },
        //{ "Battle Portals", "background: #56adff;" }
    };

    private Dictionary<string, string> exceptionColors = new Dictionary<string, string>
    {
        { "Can Be None", "background: #56adff;" },
        { "Default Abilities", "background: #56adff;" },
    };

    private Dictionary<string, string> hintColors = new Dictionary<string, string>
    {
        { "Proofs", "background: #56adff;" },
        { "Abilities", "background: #56adff;" },
        { "Heartbinders", "background: #56adff;" },
        { "Magic", "background: #56adff;" },
        { "Formchanges", "background: #56adff;" },
        { "Secret Reports", "background: #56adff;" }
    };

    private Dictionary<string, string> qolColors = new Dictionary<string, string>
    {
        { "Bosses", "background: #54ed61;" },
        { "Events", "background: #66ff73;" },
        { "Items", "background: #92ff9b;" },

        //{ "Easier Mini-UFO", "background: #56adff;" },
        //{ "Faster Raging Vulture", "background: #56adff;" },
        //{ "Dark Baymax Phase 1 Skip", "background: #56adff;" },
        //{ "Faster Lich Sequence", "background: #56adff;" },

        //{ "Frozen Chase Skip", "background: #56adff;" },
        //{ "Faster Crab Collection", "background: #56adff;" },
        //{ "Big Hero Rescue Skip", "background: #56adff;" },
        //{ "Faster Sora Collection", "background: #56adff;" },
        //{ "Union χ Skip", "background: #56adff;" },
        //{ "Guardians of Light Skip", "background: #56adff;" },
        //{ "Slow Mickey Skip", "background: #56adff;" },

        //{ "All Maps Unlocked", "background: #56adff;" },
    };

    bool isGeneratingSeed { get; set; }

    protected override void OnInitialized()
    {

    }

    public async Task GenerateSeed()
    {
        this.isGeneratingSeed = true;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        // Generate Hints
        byte[] hintResults;
        var availableHints = new Dictionary<string, bool>();

        foreach(var hint in this.AvailableHints)
        {
            foreach (var subHint in hint.Value)
            {
                availableHints.Add(subHint.Key, subHint.Value);
            }
        }

        hintResults = this.HintService.GenerateHints(this.CurrentSeed, this.RandomizedOptions, this.HintSelectionType, availableHints, ref this.hintValues);

        // Generate QoL Settings
        this.qolValues = new();

        foreach (var (category, values) in this.AvailableQualityOfLifeSettings)
        {
            foreach (var (name, active) in values)
            {
                var id = name.QoLKeyToId();

                qolValues.Add(id, active);
            }
        }

        // Generate Randomized Seed
        var file = this.RandomizerService.GenerateRandomizerSeed(this.CurrentSeed, this.RandomizedOptions, this.AvailablePools, this.Modifications, this.Exceptions, hintResults, this.hintValues, qolValues);

        await js.InvokeAsync<object>("saveAsFile", "pakchunk99-randomizer-" + this.CurrentSeed + ".zip", Convert.ToBase64String(file));
        // js.InvokeAsync<object>("saveAsFile", "pakchunk99-randomizer-" + this.CurrentSeed + ".pak", Convert.ToBase64String(files[0]));
        // js.InvokeAsync<object>("saveAsFile", "SpoilerLog-" + this.CurrentSeed + ".json", Convert.ToBase64String(files[1]));

        this.RandomizerService.DeleteRandomizerSeed(this.CurrentSeed);

        this.isGeneratingSeed = false;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        var parameters = new ModalParameters();
        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<RedirectToGuideModal>("Redirect To Guides", parameters, options);
    }
}