@using UE4DataTableInterpreter.Enums

@inject KH3Randomizer.Data.RandomizerService RandomizerService

<div class="pools-section">
    <div class="pools-subsection">
        <button class="btn kh-button" @onclick="ToggleOptions">All Options: @(this.allOptionText)</button>

        @if (!currentPreset.Equals(new KeyValuePair<string, SettingsFile>()))
        {
            <span style="float: right;">
                <span style="margin-right: 10px;"><b>Using Preset: @currentPreset.Value.Name</b></span>
                <button class="btn kh-button" @onclick="ShowPresetsModal">Presets</button>
            </span>
        }
        else
        {
            <button class="btn kh-button" style="float: right;" @onclick="ShowPresetsModal">Presets</button>
        }
        <br />
        <br />

        <h4><b>Pools</b></h4>
        <div class="row">
            @foreach (var pool in pools)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="switch">
                                <input type="checkbox" @onchange="@((value) => { HandlePoolValueChange(value, pool); })" checked="@pool.Value" disabled="@(pool.Key == "General Stats")">
                                <span class="slider round"></span>
                            </label>
                        </div>

                        <div class="col-md-6">
                            @if (pool.Key == "General Stats")
                            {
                                <label><b><strike>@pool.Key</strike></b></label>
                            }
                            else
                            {
                                <label><b>@pool.Key</b></label>
                            }
                        </div>

                        <div class="col-md-1">
                            <Tooltip Text="@optionDescriptions[pool.Key]">
                                <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                            </Tooltip>
                        </div>
                    </div>
                </div>
            }
        </div>

        <br />
        <h4><b>Extras</b></h4>
        <div>
            <div class="row">
                @foreach (var extra in extras)
                {
                    <div class="col-md-4" style="margin: 15px 0px;">
                        <div class="row">
                            <!-- Slider -->
                            <div class="col-md-2">
                                <label class="switch">
                                    <input type="checkbox" @onchange="@((value) => { HandleExtraValueChange(value, extra.Value); })" checked="@extra.Value.Enabled" disabled="@IsExtraDisabled(extra.Value)">
                                    <span class="slider round"></span>
                                </label>
                            </div>

                            <div class="col-md-6">
                                <label><b>@extra.Value.Name</b></label>
                            </div>

                            <div class="col-md-1">
                                <Tooltip Text=@(IsExtraDisabled(extra.Value) ? extra.Value.Description + " Requires: " + extra.Value.RequiredPool : extra.Value.Description)>
                                    <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                                </Tooltip>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Key Abilities search bar and list -->
    <Collapsable @ref="@keyAbilitiesCollapsable" CurrentOption="@this.currentOption" ToggleCollapsables="this.ToggleCollapsables" Title="Key Abilities" ActionType="Options">
        <SearchComponent SelectedChecks="@this.keyAbilities" SearchLimit="25" SelectedTitle="Key Abilities" SearchTitle="Available Abilities" Filter="Ability: " ActionType="Options" UseDisplayValues="true" StateUpdate="@this.ClearPreset"></SearchComponent>
    </Collapsable>

    <!-- Duplicate Abilities search bar and list -->
    <Collapsable @ref="@duplicateAbilitiesCollapsable" CurrentOption="@this.currentOption" ToggleCollapsables="this.ToggleCollapsables" Title="Duplicate Abilities" ActionType="Options">
        <SearchComponent SelectedChecks="@this.duplicateAbilities" SearchLimit="25" ListLimit="20" SelectedTitle="Duplicate Abilities" SearchTitle="Available Abilities" Filter="Ability: " Duplicates="true" ActionType="Options" StateUpdate="@this.ClearPreset"></SearchComponent>
    </Collapsable>

    <!-- Sub Pools collapsable -->
    <Collapsable @ref="@subPoolsCollapsable" CurrentOption="@this.currentOption" ToggleCollapsables="this.ToggleCollapsables" Title="Sub Pools" ActionType="Options">
        <div class="subpools-container">
            @foreach (var pool in this.pools)
            {
                @if (pool.Value)
                {
                    var replaceOptions = this.GetReplaceOptionsFromPool(pool.Key);
                    if (replaceOptions.Count > 0)
                    {
                        <div class="subpool">
                            <h4><b>@pool.Key</b></h4>
                            @foreach (var option in replaceOptions)
                            {
                                <div class="col-md-4" style="display:inline-block; padding: 0.6vh 1.2vw;">
                                    @if (replaceOptions.Count > 1)
                                    {
                                        <div style="margin:auto; text-align: center;">
                                            <label for="@option.Key-range"><b>@option.Key</b></label>
                                        </div>
                                    }
                                    <div class="form-control-range" style="padding: 0 1.4vw;">
                                        <input type="range" class="custom-range" id="@option.Key-range" max="2" min="1" value="@GetReplaceOptionValue(pool.Key, option.Key)" step="1" @onchange="@((e) => { UpdateReplaceOption(pool.Key, option.Key, e); })">
                                    </div>
                                    <div class="range-label-container">
                                        <label class="range-label" style="float: left;">Replace</label>
                                        <label class="range-label" style="float: right;">Randomize</label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            }
        </div>
    </Collapsable>

    <br />

    <button class="btn kh-button" @onclick="ContinueToOptions" style="float: right;">Continue to Options...</button>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public EventCallback<string> ContinueTo { get; set; }
    [Parameter] public EventCallback<Dictionary<string, bool>> UpdateAvailablePools { get; set; }
    [Parameter] public EventCallback<Dictionary<string, Dictionary<string, bool>>> UpdateAvailableOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<string, Extra>> UpdateAvailableExtras { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, bool>>> UpdateReplacements { get; set; }
    [Parameter] public EventCallback<List<string>> UpdateKeyAbilities { get; set; }
    [Parameter] public EventCallback<List<string>> UpdateDuplicateAbilities { get; set; }
    [Parameter] public EventCallback<string> UpdateHintSelection { get; set; }
    [Parameter] public EventCallback<List<string>> UpdateImportantChecks { get; set; }
    [Parameter] public EventCallback<KeyValuePair<string, SettingsFile>> UpdateCurrentPreset { get; set; }

    [Parameter] public Dictionary<string, bool> AvailablePools { get; set; }
    [Parameter] public Dictionary<string, Extra> AvailableExtras { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, bool>> Replacements { get; set; }
    [Parameter] public List<string> KeyAbilities { get; set; }
    [Parameter] public List<string> DuplicateAbilities { get; set; }
    [Parameter] public KeyValuePair<string, SettingsFile> CurrentPreset { get; set; }

    private bool isOn { get; set; } = false;
    private string allOptionText { get; set; } = "MIXED";
    private string searchValue = "";

    private Dictionary<string, bool> pools = new Dictionary<string, bool>();

    private Dictionary<string, string> optionDescriptions = new Dictionary<string, string> {
        { "Treasures", "The treasure chests in each world." },
        { "Starting Stats", "Starting abilities and keyblade." },
        { "Lucky Emblems", "Rewards earned for finding Lucky Emblems." },
        { "Bonuses", "Abilities, Magic and Status Boosts earned through specific events." },
        { "Fullcourse Abilities", "Abilities earned through eating a fullcourse meal." },
        { "Level Ups", "Abilities earned through leveling up Sora." },
        { "Events", "Certain key items earned through cutscenes." },
        { "Weapon Upgrades", "Abilities earned through leveling up keyblades" },
        { "Equippables", "Items such as accessories, armor and keyblades." },
        { "Synthesis Items", "Items that are synthesized through Moogle Shops." },

        { "General Stats", "Keyblade, Accessory and Armor stats, along with Health, Attack and Magic upgrades. Bosses and Enemies included potentially." }
    };

    private Dictionary<string, Extra> extras = new Dictionary<string, Extra>();

    private Collapsable keyAbilitiesCollapsable;
    private Collapsable duplicateAbilitiesCollapsable;
    private Collapsable subPoolsCollapsable;
    private string currentOption = string.Empty;
    private Dictionary<DataTableEnum, Dictionary<string, bool>> replacements = new Dictionary<DataTableEnum, Dictionary<string, bool>>();
    private List<string> keyAbilities = new List<string>();
    private List<string> duplicateAbilities = new List<string>();
    private KeyValuePair<string, SettingsFile> currentPreset = new();

    protected override void OnInitialized()
    {
        this.pools = this.AvailablePools;
        this.extras = this.AvailableExtras;
        this.replacements = this.Replacements;
        this.keyAbilities = this.KeyAbilities;
        this.duplicateAbilities = this.DuplicateAbilities;
        this.currentPreset = this.CurrentPreset;
        this.UpdateOptionsText();
    }

    private void ToggleOptions()
    {
        if (this.allOptionText.Equals("MIXED"))
            this.isOn = false;
        else if (this.allOptionText.Equals("ON"))
            this.isOn = false;
        else if (this.allOptionText.Equals("OFF"))
            this.isOn = true;

        foreach (var pool in this.pools.Where(x => x.Key != "General Stats"))
        {
            this.pools[pool.Key] = this.isOn;
        }

        foreach (var extra in this.extras)
        {
            extra.Value.Enabled = this.isOn;
        }

        this.UpdateOptionsText();
    }

    private void UpdateOptionsText()
    {
        var poolBools = this.pools.Where(x => x.Key != "General Stats").Select(x => x.Value).Distinct();

        if (poolBools.Count() == 2)
            this.allOptionText = "MIXED";
        else if (poolBools.FirstOrDefault())
            this.allOptionText = "ON";
        else
            this.allOptionText = "OFF";
    }

    private void ContinueToOptions()
    {
        //this.RandomizerService.SetAvailablePools(this.pools);
        this.UpdateAvailablePools.InvokeAsync(this.pools);
        this.UpdateAvailableExtras.InvokeAsync(this.extras);
        this.UpdateReplacements.InvokeAsync(this.replacements);
        this.UpdateKeyAbilities.InvokeAsync(this.keyAbilities);
        this.UpdateDuplicateAbilities.InvokeAsync(this.duplicateAbilities);
        this.UpdateCurrentPreset.InvokeAsync(this.currentPreset);

        this.ContinueTo.InvokeAsync("Options");
    }

    private void HandlePoolValueChange(ChangeEventArgs value, KeyValuePair<string, bool> pool)
    {
        bool newValue = (bool)value.Value;
        pools[pool.Key] = newValue;

        // Update extras that have this as a required pool
        var matchingExtras = extras.Where((e) => e.Value.RequiredPool.Contains(pool.Key));

        foreach (var extra in matchingExtras)
        {
            // If the pool is enabled, set to default. Otherwise, set to false.
            extra.Value.Enabled = (newValue && !extra.Value.RequiredPool.Contains(" Off")) || (!newValue && extra.Value.RequiredPool.Contains(" Off")) ? extra.Value.DefaultEnabled : false;
        }

        this.ClearPreset();
        this.UpdateOptionsText();
    }

    private void HandleExtraValueChange(ChangeEventArgs value, Extra extra)
    {
        extra.Enabled = (bool)value.Value;

        this.ClearPreset();
    }

    private bool IsExtraDisabled(Extra extra)
    {
        if (extra.RequiredPool != "")
        {
            var parsedRequiredPool = extra.RequiredPool.Split(" Off");
            return parsedRequiredPool.Count() > 1 ? pools[parsedRequiredPool[0]] : !pools[extra.RequiredPool];
        }
        return false;
    }

    private void ToggleCollapsables(string currentOption)
    {
        this.currentOption = currentOption;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private Dictionary<string, bool> GetReplaceOptionsFromPool(string pool)
    {
        if (pool.Equals("Treasures"))
        {
            var treasureDictionary = new Dictionary<string, bool>();
            var treasureList = Replacements.Where(x => x.Key.DataTableEnumToKey().Equals("Treasures"));
            foreach (var treasures in treasureList)
            {
                var tElement = treasures.Value.First();
                treasureDictionary.Add(tElement.Key, tElement.Value);
            }
            return treasureDictionary;
        }
        else if (Replacements.ContainsKey(pool.KeyToDataTableEnum()))
        {
            var replaceOptions = Replacements[pool.KeyToDataTableEnum()];
            return replaceOptions.Count > 0 ? Replacements[pool.KeyToDataTableEnum()] : new Dictionary<string, bool>();
        }
        return new Dictionary<string, bool>();
    }

    private int GetReplaceOptionValue(string pool, string option)
    {
        // If the option in true in replacements, return 1
        // Return 2 otherwise to set this to be randomized
        // In the future, this could be updated to have a vanilla option (0)
        var replaceKey = pool.Equals("Treasures") ? option.KeyToDataTableEnum() : pool.KeyToDataTableEnum();

        if (Replacements[replaceKey][option])
        {
            return 1;
        }
        return 2;
    }

    private void UpdateReplaceOption(string pool, string option, ChangeEventArgs e)
    {
        var replaceKey = pool.Equals("Treasures") ? option.KeyToDataTableEnum() : pool.KeyToDataTableEnum();
        // 0 is Vanilla, 1 is Replace, 2 is Randomize
        switch (e.Value)
        {
            case "1":
                this.replacements[replaceKey][option] = true;
                break;
            case "2":
                // This option should be randomized
                this.replacements[replaceKey][option] = false;
                break;
            default:
                // This option should not be randomized
                this.replacements[replaceKey][option] = false;
                break;
        }
        this.UpdateReplacements.InvokeAsync(this.replacements);
        this.ClearPreset();
    }

    private void UpdateSettingsFromPreset(KeyValuePair<string, SettingsFile> preset)
    {
        if (preset.Equals(new KeyValuePair<string, SettingsFile>()))
        {
            this.currentPreset = preset;
            this.UpdateCurrentPreset.InvokeAsync(this.currentPreset);
            return;
        }

        this.pools = preset.Value.AvailablePools;
        this.extras = preset.Value.AvailableExtras.Where(x => this.extras.ContainsKey(x.Key)).ToDictionary(x => x.Key, x => new Extra(this.extras[x.Key].Name, x.Value.Enabled, this.extras[x.Key].RequiredPool, this.extras[x.Key].Description));
        this.replacements = preset.Value.Replacements;
        this.keyAbilities = preset.Value.KeyAbilities;
        this.duplicateAbilities = preset.Value.DuplicateAbilities;
        this.currentPreset = preset;
        this.UpdateOptionsText();

        this.UpdateAvailablePools.InvokeAsync(this.pools);
        this.UpdateAvailableOptions.InvokeAsync(preset.Value.AvailableOptions);
        this.UpdateAvailableExtras.InvokeAsync(this.extras);
        this.UpdateReplacements.InvokeAsync(this.replacements);
        this.UpdateKeyAbilities.InvokeAsync(this.keyAbilities);
        this.UpdateDuplicateAbilities.InvokeAsync(this.duplicateAbilities);
        this.UpdateHintSelection.InvokeAsync(preset.Value.HintType);
        this.UpdateImportantChecks.InvokeAsync(preset.Value.ImportantChecks);
        this.UpdateCurrentPreset.InvokeAsync(this.currentPreset);
    }

    private async void ShowPresetsModal()
    {
        var parameters = new ModalParameters();
        parameters.Add("UsePreset", EventCallback.Factory.Create<KeyValuePair<string, SettingsFile>>(this, UpdateSettingsFromPreset));
        parameters.Add("CurrentPreset", this.currentPreset);
        var options = new ModalOptions { Class = "modal-custom" };

        var unnamedSeedModal = Modal.Show<LoadPresetsModal>("Presets", parameters, options);
        var result = await unnamedSeedModal.Result;
    }

    private void ClearPreset()
    {
        if (!currentPreset.Equals(new KeyValuePair<string, SettingsFile>()))
        {
            this.currentPreset = new();
            UpdateCurrentPreset.InvokeAsync(this.currentPreset);
        }
    }
}