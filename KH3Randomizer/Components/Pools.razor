@inject KH3Randomizer.Data.RandomizerService RandomizerService

@using Enums; 
@using UE4DataTableInterpreter.Enums; 
@using System.Text.RegularExpressions;

<div class="pools-section">
    <div class="row" style="margin-top: 15px;">
        <div class="kh-input col-md-12">
            <div class="row">
                <div class="col-md-2">
                    <label for="seed" style="font-size: 1.3rem; padding: 5px 0px 0px 0px;">Seed Name: </label>
                </div>

                <div class="col-md-5">
                    <input id="seed" name="seed" class="kh-inputfield" @onchange="RandomizeByPools" placeholder="Enter a seed name..." value="@(string.IsNullOrEmpty(this.currentSeed) ? "" : this.currentSeed)" />
                </div>

                <div class="col-md-1" style="margin-top: 8px; float: right;">
                    <Tooltip Text="This is what is used to randomize the items. You can generate a duplicate seed if the same name is used.">
                        <i class="bi bi-question-circle" style="font-size: 1.2rem;"></i>
                    </Tooltip>
                </div>

                <div class="col-md-4" style="margin-top: 8px; text-align: end;">
                    <b>All Pools: </b>

                    <div id="poolOptionEnums" style="display: inline-flex;">
                        <button class="kh-left-switch @(this.randomizeOption == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdatePools(RandomizeOptionEnum.Vanilla); })">
                            Vanilla
                        </button>
                        <button class="kh-center-switch @(this.randomizeOption == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdatePools(RandomizeOptionEnum.Randomize); })">
                            Randomize
                        </button>
                        <button class="kh-right-switch @(this.randomizeOption == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdatePools(RandomizeOptionEnum.Replace); })">
                            Replace
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pools-subsection">
        <h3 style="display: inline;">World Pools</h3>
        <Tooltip Text="All of these categories contain Treasures, Events & Bonuses">
            <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue; padding-left: 30px;"></i>
        </Tooltip>

        <div class="row">
            @foreach (var pool in worldPools)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-12">
                            <label style="margin-top: 5px;"><b>@pool.Key:</b></label>

                            <div id="poolOptionEnums" style="display: inline-flex; float: right;">
                                <button class="kh-left-switch @(pool.Value == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateWorldPool(pool.Key, RandomizeOptionEnum.Vanilla); })">
                                    Vanilla
                                </button>
                                <button class="kh-center-switch @(pool.Value == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateWorldPool(pool.Key, RandomizeOptionEnum.Randomize); })">
                                    Randomize
                                </button>
                                <button class="kh-right-switch @(pool.Value == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateWorldPool(pool.Key, RandomizeOptionEnum.Replace); })">
                                    Replace
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <hr />

        <h3>Miscellaneous Pools</h3>

        <div class="row">
            @foreach (var pool in miscellaneousPools.Where(x => x.Key != "Always On"))
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-3">
                            <label style="margin-top: 5px;"><b>@pool.Key:</b></label>
                        </div>
                        <div class="col-md-1">
                            <Tooltip Text="@this.poolDescriptions[pool.Key]">
                                <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue; padding-right: 5px;"></i>
                            </Tooltip>
                        </div>
                        <div class="col-md-8">
                            <div id="poolOptionEnums" style="display: inline-flex; float: right;">
                                <button class="kh-left-switch @(pool.Value == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateMiscellaneousPool(pool.Key, RandomizeOptionEnum.Vanilla); })" disabled="@(pool.Key == "Battle Portals")">
                                    Vanilla
                                </button>
                                <button class="kh-center-switch @(pool.Value == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateMiscellaneousPool(pool.Key, RandomizeOptionEnum.Randomize); })" disabled="@(pool.Key == "Battle Portals")">
                                    Randomize
                                </button>
                                <button class="kh-right-switch @(pool.Value == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { this.UpdateMiscellaneousPool(pool.Key, RandomizeOptionEnum.Replace); })" disabled="@(pool.Key == "Battle Portals")">
                                    Replace
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="pools-subsection">
        <h3 style="display: inline;">Exceptions</h3>

        <div class="row">
            @* This is because canBeNone was developed outside of the exception framework and re-designing the entire structure again is too much right now *@
            <div class="col-md-4" style="margin: 15px 0px;">
                <div class="row">
                    <div class="col-md-2">
                        <label class="switch">
                            <input type="checkbox" @onchange="@(() => { this.CanBeNone = !this.CanBeNone; this.UpdateCanBeNone.InvokeAsync(this.CanBeNone); 
                                                                    this.RandomizeByPools(new ChangeEventArgs { Value = this.currentSeed }); })" checked="@this.CanBeNone">
                            <span class="slider round"></span>
                        </label>
                    </div>

                    <div class="col-md-6">
                        <label><b>Can Be None</b></label>
                    </div>

                    <div class="col-md-1">
                        <Tooltip Text="Allows None to appear in all Pools. For instance, opening a chest may have nothing in it.">
                            <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                        </Tooltip>
                    </div>
                </div>
            </div>

            @foreach (var (name, value) in this.exceptions)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="switch">
                                <input type="checkbox" @onchange="@((value) => { this.exceptions[name] = (bool)value.Value; this.UpdateExceptions.InvokeAsync(this.exceptions);
                                                                        this.RandomizeByPools(new ChangeEventArgs { Value = this.currentSeed }); })" checked="@value">
                                <span class="slider round"></span>
                            </label>
                        </div>

                        <div class="col-md-6">
                            <label><b>@name</b></label>
                        </div>

                        <div class="col-md-1">
                            <Tooltip Text="@this.exceptionDescriptions[name]">
                                <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                            </Tooltip>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (!this.IsSpoilerLog)
    {
    <b>Is Plandomizer: </b>

    <label class="switch">
        <input type="checkbox" @onchange="@(() => { this.IsPlando = !this.IsPlando; this.UpdatePlando.InvokeAsync(this.IsPlando); })" checked="@this.IsPlando">
        <span class="slider round"></span>
    </label>

    <label style="margin-left: 10px;"><i>This feature is active but not supported for the 1.1 release.</i></label>
    
    <button class="btn kh-button" @onclick="@(() => { string section = this.IsPlando ? "Options" : "Quality of Life"; this.ContinueToNext(section); })" style="float: right;">Continue to @(this.IsPlando ? "Options" : "Quality of Life")...</button>
    }
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public EventCallback<string> ContinueTo { get; set; }
    [Parameter] public EventCallback<Dictionary<string, RandomizeOptionEnum>> UpdateAvailablePools { get; set; }
    [Parameter] public EventCallback<bool> UpdatePlando { get; set; }
    [Parameter] public EventCallback<bool> UpdateCanBeNone { get; set; }
    [Parameter] public EventCallback<string> UpdateCurrentSeed { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>> UpdateRandomizedOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<string, bool>> UpdateExceptions { get; set; }

    [Parameter] public Dictionary<string, RandomizeOptionEnum> AvailablePools { get; set; }
    [Parameter] public Dictionary<string, bool> Exceptions { get; set; }
    [Parameter] public bool IsPlando { get; set; }
    [Parameter] public bool IsSpoilerLog { get; set; } = false;
    [Parameter] public bool CanBeNone { get; set; }
    [Parameter] public string CurrentSeed { get; set; }

    private RandomizeOptionEnum randomizeOption { get; set; } = RandomizeOptionEnum.None;
    private string currentSeed = "";

    private Dictionary<string, RandomizeOptionEnum> worldPools = new Dictionary<string, RandomizeOptionEnum>();
    private Dictionary<string, RandomizeOptionEnum> miscellaneousPools = new Dictionary<string, RandomizeOptionEnum>();
    private Dictionary<string, bool> exceptions { get; set; }

    private Dictionary<string, string> exceptionDescriptions = new Dictionary<string, string>
    {
        { "Default Abilities", "Keeps Sora's base abilities from being randomized, like Pole Spin, Dodge, Block, etc." },
        { "Default Critical Abilities", "Keeps Sora's base critical abilities from being randomized, like Critical Converter, Critical Counter, etc." },
        { "Early Critical Abilities", "Keeps Sora's early critical abilities earned from being randomized, like Air Slide, Superslide, etc." },
    };

    private Dictionary<string, string> poolDescriptions = new Dictionary<string, string> {
        { "Sora", "Starting Abilities, Starting Keyblade and Sora's Level Up Rewards." },
        { "Equipment Abilities", "Abilities found on Armor, Accessories and base Keyblades." },
        { "Data Battle Rewards", "Rewards given to Sora after defeating a Data Battle, like Data Young Xehanort." },
        { "Moogle Workshop", "Synthesis Items, Photo Mission Rewards and Abilities gained from leveling up Keyblades." },
        { "Fullcourse Abilities", "Abilities gained for a limited amount of time from eating fullcourse meals." },
        { "Lucky Emblems", "Rewards earned for finding Lucky Emblems." },
        { "Flantastic Flans", "Rewards earned for max completing a Flan Missions." },
        { "Minigames", "Rewards earned for obtaining an A-Rank in a Minigame." },
        { "Battle Portals", "Rewards earned for completing a Battle Portal." },
    };

    protected override void OnInitialized()
    {
        this.worldPools = this.RandomizerService.GetPools(this.AvailablePools, "World");
        this.miscellaneousPools = this.RandomizerService.GetPools(this.AvailablePools, "Miscellaneous");
        this.exceptions = this.Exceptions;

        this.currentSeed = this.CurrentSeed ?? "";
    }

    protected override void OnParametersSet()
    {
        this.worldPools = this.RandomizerService.GetPools(this.AvailablePools, "World");
        this.miscellaneousPools = this.RandomizerService.GetPools(this.AvailablePools, "Miscellaneous");
        this.exceptions = this.Exceptions;

        this.currentSeed = this.CurrentSeed ?? "";

        base.OnParametersSet();
    }

    private void UpdateWorldPool(string key, RandomizeOptionEnum randomizeOptionEnum)
    {
        this.worldPools[key] = randomizeOptionEnum;


        this.RandomizeByPools(new ChangeEventArgs { Value = this.currentSeed });
    }

    private void UpdateMiscellaneousPool(string key, RandomizeOptionEnum randomizeOptionEnum)
    {
        this.miscellaneousPools[key] = randomizeOptionEnum;


        this.RandomizeByPools(new ChangeEventArgs { Value = this.currentSeed });
    }

    private void UpdatePools(RandomizeOptionEnum randomizeOptionEnum)
    {
        this.randomizeOption = randomizeOptionEnum;

        foreach (var pool in this.worldPools)
            this.worldPools[pool.Key] = randomizeOptionEnum;

        foreach (var pool in this.miscellaneousPools.Where(x => x.Key != "Always On" && x.Key != "Battle Portals"))
            this.miscellaneousPools[pool.Key] = randomizeOptionEnum;


        this.RandomizeByPools(new ChangeEventArgs { Value = this.currentSeed });
    }

    private void RandomizeByPools(ChangeEventArgs e)
    {
        this.currentSeed = e.Value.ToString();

        this.currentSeed = Regex.Replace(this.currentSeed, @"[^\w\-]", "");

        this.UpdateCurrentSeed.InvokeAsync(this.currentSeed);

        // Combine Separated Dictionaries
        var combinedDictionary = worldPools.ToDictionary(x => x.Key, y => y.Value);
        miscellaneousPools.ToList().ForEach(x => combinedDictionary.Add(x.Key, x.Value));

        this.UpdateAvailablePools.InvokeAsync(combinedDictionary);

        var randomizedItems = this.RandomizerService.Process(this.currentSeed, combinedDictionary, this.exceptions, this.CanBeNone);

        this.UpdateRandomizedOptions.InvokeAsync(randomizedItems);
    }

    private async void ContinueToNext(string section)
    {
        if (string.IsNullOrEmpty(this.CurrentSeed))
        {
            var parameters = new ModalParameters();
            var options = new ModalOptions { Class = "modal-custom" };

            var unnamedSeedModal = Modal.Show<UnnamedSeedModal>("Unnamed Seed", parameters, options);
            var result = await unnamedSeedModal.Result;

            if (result.Cancelled || result.Data == null || (string)result.Data != "User closed modal")
            {
                return;
            }
        }
        
        await this.ContinueTo.InvokeAsync(section);
    }
}