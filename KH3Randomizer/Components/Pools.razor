@using UE4DataTableInterpreter.Enums

@inject KH3Randomizer.Data.RandomizerService RandomizerService

<div class="pools-section">
    <div class="pools-subsection">
        <button class="btn kh-button" @onclick="ToggleOptions">All Options: @(this.allOptionText)</button>

        <br />
        <br />

        <h4><b>Pools</b></h4>
        <div class="row">
            @foreach (var pool in pools)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-2">
                            <label class="switch">
                                <input type="checkbox" @onchange="@((value) => { HandlePoolValueChange(value, pool); })" checked="@pool.Value" disabled="@(pool.Key == "General Stats")">
                                <span class="slider round"></span>
                            </label>
                        </div>

                        <div class="col-md-6">
                            @if (pool.Key == "General Stats")
                            {
                                <label><b><strike>@pool.Key</strike></b></label>
                            }
                            else
                            {
                                <label><b>@pool.Key</b></label>
                            }
                        </div>

                        <div class="col-md-1">
                            <Tooltip Text="@optionDescriptions[pool.Key]">
                                <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                            </Tooltip>
                        </div>
                    </div>
                </div>
            }
        </div>

        <br />
        <h4><b>Extras</b></h4>
        <div class="row">
            @foreach (var extra in extras)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <!-- Slider -->
                        <div class="col-md-2">
                            <label class="switch">
                                <input type="checkbox" @onchange="@((value) => { extra.Value.Enabled = (bool)value.Value; })" checked="@extra.Value.Enabled" disabled="@IsExtraDisabled(extra.Value)">
                                <span class="slider round"></span>
                            </label>
                        </div>

                        <div class="col-md-6">
                            <label><b>@extra.Value.Name</b></label>
                        </div>

                        <div class="col-md-1">
                            <Tooltip Text="@extra.Value.Description">
                                <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
                            </Tooltip>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <Collapsable @ref="@subPoolsCollapsable" CurrentOption="@this.currentSubPool" ToggleCollapsables="this.ToggleCollapsables" Title="@("Sub Pools")" ActionType="@("Options")">
        <div class="subpools-container">
            @foreach (var pool in this.pools)
            {
                @if (pool.Value)
                {
                    var replaceOptions = this.GetReplaceOptionsFromPool(pool.Key);
                    if (replaceOptions.Count > 0)
                    {
                        <div class="subpool">
                            <h4><b>@pool.Key</b></h4>
                            @foreach (var option in replaceOptions)
                            {
                                <div class="col-md-4" style="display:inline-block; padding: 0.6vh 1.2vw;">
                                    @if (replaceOptions.Count > 1)
                                    {
                                        <div style="margin:auto; text-align: center;">
                                            <label for="@option.Key-range"><b>@option.Key</b></label>
                                        </div>
                                    }
                                    <div class="form-control-range" style="padding: 0 1.4vw;">
                                        <input type="range" class="custom-range" id="@option.Key-range" max="2" min="1" value="@GetReplaceOptionValue(pool.Key, option.Key)" step="1" @onchange="@((e) => { UpdateReplaceOption(pool.Key, option.Key, e); })">
                                    </div>
                                    <div class="range-label-container">
                                        <label class="range-label" style="float: left;">Replace</label>
                                        <label class="range-label" style="float: right;">Randomize</label>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            }
        </div>
    </Collapsable>

    <br />

    <button class="btn kh-button" @onclick="ContinueToOptions" style="float: right;">Continue to Options...</button>
</div>

@code {
    [Parameter] public EventCallback<string> ContinueTo { get; set; }
    [Parameter] public EventCallback<Dictionary<string, bool>> UpdateAvailablePools { get; set; }
    [Parameter] public EventCallback<Dictionary<string, Extra>> UpdateAvailableExtras { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, bool>>> UpdateReplacements { get; set; }

    [Parameter] public Dictionary<string, bool> AvailablePools { get; set; }
    [Parameter] public Dictionary<string, Extra> AvailableExtras { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, bool>> Replacements { get; set; }

    private bool isOn { get; set; } = false;
    private string allOptionText { get; set; } = "MIXED";

    private Dictionary<string, bool> pools = new Dictionary<string, bool>();

    private Dictionary<string, string> optionDescriptions = new Dictionary<string, string> {
        { "Treasures", "The treasure chests in each world." },
        { "Starting Stats", "Starting abilities and keyblade." },
        { "Lucky Emblems", "Rewards earned for finding Lucky Emblems." },
        { "Bonuses", "Abilities, Magic and Status Boosts earned through specific events." },
        { "Fullcourse Abilities", "Abilities earned through eating a fullcourse meal." },
        { "Level Ups", "Abilities earned through leveling up Sora." },
        { "Events", "Certain key items earned through cutscenes." },
        { "Weapon Upgrades", "Abilities earned through leveling up keyblades" },
        { "Equippables", "Items such as accessories, armor and keyblades." },
        { "Synthesis Items", "Items that are synthesized through Moogle Shops." },

        { "General Stats", "Keyblade, Accessory and Armor stats, along with Health, Attack and Magic upgrades. Bosses and Enemies included potentially." }
    };

    private Dictionary<string, Extra> extras = new Dictionary<string, Extra>();

    private Collapsable subPoolsCollapsable;
    private string currentSubPool = string.Empty;
    private Dictionary<DataTableEnum, Dictionary<string, bool>> replacements { get; set; }

    protected override void OnInitialized()
    {
        this.pools = this.AvailablePools;
        this.extras = this.AvailableExtras;
        this.replacements = this.Replacements;
        this.UpdateOptionsText();
    }



    private void ToggleOptions()
    {
        if (this.allOptionText.Equals("MIXED"))
            this.isOn = false;
        else if (this.allOptionText.Equals("ON"))
            this.isOn = false;
        else if (this.allOptionText.Equals("OFF"))
            this.isOn = true;

        foreach (var pool in this.pools.Where(x => x.Key != "General Stats"))
        {
            this.pools[pool.Key] = this.isOn;
        }

        foreach (var extra in this.extras)
        {
            extra.Value.Enabled = this.isOn;
        }

        this.UpdateOptionsText();
    }

    private void UpdateOptionsText()
    {
        var poolBools = this.pools.Where(x => x.Key != "General Stats").Select(x => x.Value).Distinct();

        if (poolBools.Count() == 2)
            this.allOptionText = "MIXED";
        else if (poolBools.FirstOrDefault())
            this.allOptionText = "ON";
        else
            this.allOptionText = "OFF";
    }

    private void ContinueToOptions()
    {
        //this.RandomizerService.SetAvailablePools(this.pools);
        this.UpdateAvailablePools.InvokeAsync(this.pools);
        this.UpdateAvailableExtras.InvokeAsync(this.extras);
        this.UpdateReplacements.InvokeAsync(this.replacements);

        this.ContinueTo.InvokeAsync("Options");
    }

    private void HandlePoolValueChange(ChangeEventArgs value, KeyValuePair<string, bool> pool)
    {
        bool newValue = (bool)value.Value;
        pools[pool.Key] = newValue;

        // Update extras that have this as a required pool
        var matchingExtras = extras.Where((e) => e.Value.RequiredPool == pool.Key);

        foreach (var extra in matchingExtras)
        {
            // If the pool is enabled, set to default. Otherwise, set to false.
            extra.Value.Enabled = newValue ? extra.Value.DefaultEnabled : false;
        }

        this.UpdateOptionsText();
    }

    private bool IsExtraDisabled(Extra extra)
    {
        if (extra.RequiredPool != "")
        {
            return !pools[extra.RequiredPool];
        }
        return false;
    }

    private void ToggleCollapsables(string currentSubPool)
    {
        this.currentSubPool = currentSubPool;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private Dictionary<string, bool> GetReplaceOptionsFromPool(string pool)
    {
        if (Replacements.ContainsKey(pool.KeyToDataTableEnum()))
        {
            var replaceOptions = Replacements[pool.KeyToDataTableEnum()];
            return replaceOptions.Count > 0 ? Replacements[pool.KeyToDataTableEnum()] : new Dictionary<string, bool>();
        }
        return new Dictionary<string, bool>();
    }

    private int GetReplaceOptionValue(string pool, string option)
    {
        // If the option in true in replacements, return 1
        // Return 2 otherwise to set this to be randomized
        // In the future, this could be updated to have a vanilla option (0)
        if (Replacements[pool.KeyToDataTableEnum()][option])
        {
            return 1;
        }
        return 2;
    }

    private void UpdateReplaceOption(string pool, string option, ChangeEventArgs e)
    {
        // 0 is Vanilla, 1 is Replace, 2 is Randomize
        switch (e.Value)
        {
            case "1":
                this.replacements[pool.KeyToDataTableEnum()][option] = true;
                break;
            case "2":
                // This option should be randomized
                this.replacements[pool.KeyToDataTableEnum()][option] = false;
                break;
            default:
                // This option should not be randomized
                this.replacements[pool.KeyToDataTableEnum()][option] = false;
                break;
        }
        this.UpdateReplacements.InvokeAsync(this.replacements);
    }
}