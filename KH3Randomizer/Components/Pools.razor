@inject KH3Randomizer.Data.RandomizerService RandomizerService

@using Enums; 
@using UE4DataTableInterpreter.Enums; 

<div class="pools-section">
    <div class="row" style="margin-top: 15px;">
        <div class="kh-input col-md-12">
            <div class="row">
                <div class="col-md-2">
                    <label for="seed" style="font-size: 1.3rem; padding: 5px 0px 0px 0px;">Seed Name: </label>
                </div>

                <div class="col-md-5">
                    <input id="seed" name="seed" class="kh-inputfield" @onchange="RandomizeByPools" placeholder="Enter a seed name..." value="@(string.IsNullOrEmpty(this.currentSeed) ? "" : this.currentSeed)" />
                </div>

                <div class="col-md-1" style="margin-top: 8px; float: right;">
                    <Tooltip Text="This is what is used to randomize the items. You can generate a duplicate seed if the same name is used.">
                        <i class="bi bi-question-circle" style="font-size: 1.2rem;"></i>
                    </Tooltip>
                </div>

                <div class="col-md-4" style="margin-top: 8px; text-align: end;">
                    <b>All Pools: </b>

                    <div id="poolOptionEnums" style="display: inline-flex;">
                        <button class="kh-left-switch @(this.randomizeOption == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { UpdatePools(RandomizeOptionEnum.Vanilla); })">
                            Vanilla
                        </button>
                        <button class="kh-center-switch @(this.randomizeOption == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { UpdatePools(RandomizeOptionEnum.Randomize); })">
                            Randomize
                        </button>
                        <button class="kh-right-switch @(this.randomizeOption == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { UpdatePools(RandomizeOptionEnum.Replace); })">
                            Replace
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="pools-subsection">
        <h3 style="display: inline;">World Pools</h3>
        <Tooltip Text="All of these categories contain Treasures, Events & Bonuses">
            <i class="bi bi-question-circle" style="font-size: 1.2rem; color: dodgerblue;"></i>
        </Tooltip>

        <div class="row">
            @foreach (var pool in worldPools)
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-12">
                            <label style="margin-top: 5px;"><b>@pool.Key:</b></label>

                            <div id="poolOptionEnums" style="display: inline-flex; float: right;">
                                <button class="kh-left-switch @(pool.Value == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { worldPools[pool.Key] = RandomizeOptionEnum.Vanilla; })">
                                    Vanilla
                                </button>
                                <button class="kh-center-switch @(pool.Value == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { worldPools[pool.Key] = RandomizeOptionEnum.Randomize; })">
                                    Randomize
                                </button>
                                <button class="kh-right-switch @(pool.Value == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { worldPools[pool.Key] = RandomizeOptionEnum.Replace; })">
                                    Replace
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <hr />

        <h3>Miscellaneous Pools</h3>

        <div class="row">
            @foreach (var pool in miscellaneousPools.Where(x => x.Key != "Always On"))
            {
                <div class="col-md-4" style="margin: 15px 0px;">
                    <div class="row">
                        <div class="col-md-12">
                            <label style="margin-top: 5px;"><b>@pool.Key:</b></label>

                            <div id="poolOptionEnums" style="display: inline-flex; float: right;">
                                <button class="kh-left-switch @(pool.Value == RandomizeOptionEnum.Vanilla ? "kh-switch-active" : "")" @onclick="@(() => { miscellaneousPools[pool.Key] = RandomizeOptionEnum.Vanilla; })">
                                    Vanilla
                                </button>
                                <button class="kh-center-switch @(pool.Value == RandomizeOptionEnum.Randomize ? "kh-switch-active" : "")" @onclick="@(() => { miscellaneousPools[pool.Key] = RandomizeOptionEnum.Randomize; })">
                                    Randomize
                                </button>
                                <button class="kh-right-switch @(pool.Value == RandomizeOptionEnum.Replace ? "kh-switch-active" : "")" @onclick="@(() => { miscellaneousPools[pool.Key] = RandomizeOptionEnum.Replace; })">
                                    Replace
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <b>Is Plandomizer: </b>

    <label class="switch">
        <input type="checkbox" @onchange="@(() => { this.IsPlando = !this.IsPlando; this.UpdatePlando.InvokeAsync(this.IsPlando); })" checked="@this.IsPlando" disabled="@(true)">
        <span class="slider round"></span>
    </label>

    <label style="margin-left: 10px;"><i>This feature is disabled for the 1.1 release since we've changed the underlying framework for seed generation.</i></label>

    <button class="btn kh-button" onclick="@ContinueTo" style="float: right;">Continue to @(this.IsPlando ? "Options" : "QoL")...</button>
</div>

@code {
    [Parameter] public EventCallback<string> ContinueTo { get; set; }
    [Parameter] public EventCallback<Dictionary<string, RandomizeOptionEnum>> UpdateAvailablePools { get; set; }
    [Parameter] public EventCallback<bool> UpdatePlando { get; set; }
    [Parameter] public EventCallback<string> UpdateCurrentSeed { get; set; }
    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>> UpdateRandomizedOptions { get; set; }

    [Parameter] public Dictionary<string, RandomizeOptionEnum> AvailablePools { get; set; }
    [Parameter] public bool IsPlando { get; set; }
    [Parameter] public string CurrentSeed { get; set; }

    private RandomizeOptionEnum randomizeOption { get; set; } = RandomizeOptionEnum.None;
    private string currentSeed { get; set; } = "";

    private Dictionary<string, RandomizeOptionEnum> worldPools = new Dictionary<string, RandomizeOptionEnum>();
    private Dictionary<string, RandomizeOptionEnum> miscellaneousPools = new Dictionary<string, RandomizeOptionEnum>();

    private Dictionary<string, string> optionDescriptions = new Dictionary<string, string> {
        { "Treasures", "The treasure chests in each world." },
        { "Starting Stats", "Starting abilities and keyblade." },
        { "Lucky Emblems", "Rewards earned for finding Lucky Emblems." },
        { "Bonuses", "Abilities, Magic and Status Boosts earned through specific events." },
        { "Fullcourse Abilities", "Abilities earned through eating a fullcourse meal." },
        { "Level Ups", "Abilities earned through leveling up Sora." },
        { "Events", "Certain key items earned through cutscenes." },
        { "Weapon Upgrades", "Abilities earned through leveling up keyblades" },
        { "Equippables", "Items such as accessories, armor and keyblades." },
        { "Synthesis Items", "Items that are synthesized through Moogle Shops." },

        { "Bosses", "Bosses such as Xehanort, Data-Xehanort and Replica Xehanort." },
        { "Enemies", "Base mob enemies such as shadows, flame cores, etc." },
        { "General Stats", "Keyblade, Accessory and Armor stats, along with Health, Attack and Magic upgrades. Bosses and Enemies included potentially." }
    };

    protected override void OnInitialized()
    {
        this.worldPools = this.RandomizerService.GetPools(this.AvailablePools, "World");
        this.miscellaneousPools = this.RandomizerService.GetPools(this.AvailablePools, "Miscellaneous");

        this.currentSeed = this.CurrentSeed;
    }

    private void UpdatePools(RandomizeOptionEnum randomizeOptionEnum)
    {
        this.randomizeOption = randomizeOptionEnum;

        foreach (var pool in this.worldPools)
            this.worldPools[pool.Key] = randomizeOptionEnum;

        foreach (var pool in this.miscellaneousPools)
            this.miscellaneousPools[pool.Key] = randomizeOptionEnum;
    }

    private void RandomizeByPools(ChangeEventArgs e)
    {
        this.currentSeed = e.Value.ToString();

        this.UpdateCurrentSeed.InvokeAsync(this.currentSeed);

        // Combine Separated Dictionaries
        var combinedDictionary = worldPools.ToDictionary(x => x.Key, y => y.Value);
        miscellaneousPools.ToList().ForEach(x => combinedDictionary.Add(x.Key, x.Value));

        var randomizedItems = this.RandomizerService.Process(this.currentSeed, combinedDictionary);

        this.UpdateRandomizedOptions.InvokeAsync(randomizedItems);
    }
}